const BOARD_SIZE = 15;
const WIN_COUNT = 5;
const board = [];
let currentPlayer = 'X';
let isGameOver = false;

const caroBoardElement = document.getElementById('caro-board');
const currentPlayerElement = document.getElementById('current-player');
const messageElement = document.getElementById('message');

/** Chuy·ªÉn m√†n h√¨nh t·ª´ ƒëƒÉng nh·∫≠p sang game */
function startGameDemo() {
    document.getElementById('auth-screen').classList.remove('active');
    document.getElementById('game-screen').classList.add('active');
    initGame();
}

/** Kh·ªüi t·∫°o b√†n c·ªù v√† logic game */
function initGame() {
    caroBoardElement.innerHTML = ''; // X√≥a b√†n c·ªù c≈©
    board.length = 0; // X√≥a m·∫£ng logic c≈©
    isGameOver = false;
    currentPlayer = 'X';
    currentPlayerElement.textContent = 'X';
    messageElement.textContent = '';

    // T·∫°o m·∫£ng 2 chi·ªÅu ƒë·∫°i di·ªán cho b√†n c·ªù v√† c√°c √¥ HTML
    for (let i = 0; i < BOARD_SIZE; i++) {
        board[i] = [];
        for (let j = 0; j < BOARD_SIZE; j++) {
            board[i][j] = ''; // 'X' ho·∫∑c 'O'
            
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.row = i;
            cell.dataset.col = j;
            cell.addEventListener('click', handleCellClick);
            caroBoardElement.appendChild(cell);
        }
    }
}

/** X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i click v√†o m·ªôt √¥ */
function handleCellClick(event) {
    if (isGameOver) {
        messageElement.textContent = "V√°n ƒë·∫•u ƒë√£ k·∫øt th√∫c. Nh·∫•n 'Ch∆°i l·∫°i'!";
        return;
    }

    const row = parseInt(event.target.dataset.row);
    const col = parseInt(event.target.dataset.col);

    // Ki·ªÉm tra √¥ ƒë√£ ƒë∆∞·ª£c ƒëi ch∆∞a
    if (board[row][col] !== '') {
        return; 
    }

    // 1. C·∫≠p nh·∫≠t logic
    board[row][col] = currentPlayer;

    // 2. C·∫≠p nh·∫≠t giao di·ªán
    event.target.textContent = currentPlayer;
    event.target.classList.add('occupied', currentPlayer);

    // 3. Ki·ªÉm tra th·∫Øng
    if (checkWin(row, col, currentPlayer)) {
        messageElement.textContent = `Ng∆∞·ªùi ch∆°i ${currentPlayer} ƒê√É TH·∫ÆNG! üéâ`;
        isGameOver = true;
    } else {
        // 4. Chuy·ªÉn l∆∞·ª£t
        currentPlayer = (currentPlayer === 'X') ? 'O' : 'X';
        currentPlayerElement.textContent = currentPlayer;
    }
}

/** Ki·ªÉm tra chi·∫øn th·∫Øng */
function checkWin(r, c, player) {
    // ƒê·ªãnh nghƒ©a 4 h∆∞·ªõng ki·ªÉm tra (Ngang, D·ªçc, Ch√©o ch√≠nh, Ch√©o ph·ª•)
    const directions = [
        [0, 1],   // Ngang (col + 1)
        [1, 0],   // D·ªçc (row + 1)
        [1, 1],   // Ch√©o ch√≠nh (row + 1, col + 1)
        [1, -1]   // Ch√©o ph·ª• (row + 1, col - 1)
    ];

    for (const [dr, dc] of directions) {
        let count = 1; // T√≠nh c·∫£ qu√¢n v·ª´a ƒë√°nh
        
        // Ki·ªÉm tra v·ªÅ 1 ph√≠a
        for (let i = 1; i < WIN_COUNT; i++) {
            const newR = r + dr * i;
            const newC = c + dc * i;
            if (newR >= 0 && newR < BOARD_SIZE && newC >= 0 && newC < BOARD_SIZE && board[newR][newC] === player) {
                count++;
            } else {
                break;
            }
        }

        // Ki·ªÉm tra v·ªÅ ph√≠a ƒë·ªëi di·ªán
        for (let i = 1; i < WIN_COUNT; i++) {
            const newR = r - dr * i;
            const newC = c - dc * i;
            if (newR >= 0 && newR < BOARD_SIZE && newC >= 0 && newC < BOARD_SIZE && board[newR][newC] === player) {
                count++;
            } else {
                break;
            }
        }

        if (count >= WIN_COUNT) {
            return true;
        }
    }
    return false;
}

/** Thi·∫øt l·∫≠p l·∫°i tr√≤ ch∆°i */
function resetGame() {
    initGame();
}

// Kh·ªüi t·∫°o b√†n c·ªù l·∫ßn ƒë·∫ßu (khi v√†o m√†n h√¨nh game demo)
// initGame(); // B·ªè comment n·∫øu mu·ªën hi·ªÉn th·ªã b√†n c·ªù ngay khi load trang

// L∆∞u √Ω: G·ªçi startGameDemo() khi nh·∫•n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu game
